import type { NextPage } from "next";
import { useState, useEffect } from "react";
import Head from "next/head";
import styled from "styled-components";
import { useApolloClient } from "@apollo/client";

import {
  useGetChatsQuery,
  useNewMessageSubscription,
  User,
  NewMessageDocument,
  GetContactsQuery,
  useGetCurrentUserQuery,
  GetCurrentUserQuery,
} from "../generated/graphql";
import { isUserLoggedIn } from "../utils/isUserLoggedIn";
import { getUsersFullname } from "../utils/getUsersFullname";
import { formatDate } from "../utils/dateFunctions";

import ChatSection from "../containers/ChatSection";
import Sidebar from "../components/Sidebar";
import Chat from "../components/Chat";
import ChatPlaceholder from "../components/ChatPlaceholder";
import QueryResult from "../components/QueryResult";
import ContactsTab from "../containers/ContactsTab";
import AddGroupParticipants from "../containers/AddGroupParticipants";
import CreateGroup from "../containers/CreateGroup";
import EditProfile from "../containers/EditProfile";

const Container = styled.div`
  display: flex;
  height: 100vh;
  width: 100vw;
  overflow: hidden;
`;

const SidebarContainer = styled.div`
  flex: 40%;
  min-width: 330px;
  border-right: 1px solid ${({ theme }) => theme.globalTheme.greyLineColor};
  ${({ theme }) => theme.homePageTheme.mediumScreen`
    flex: 35%;
  `};
`;

const ChatWrapper = styled.div`
  flex: 60%;
  ${({ theme }) => theme.homePageTheme.mediumScreen`
    flex: 65%;
  `};
`;

export type ContactType = GetContactsQuery["getContacts"][0];

interface HomePageProps {
  currentUser: GetCurrentUserQuery["currentUser"];
}

const Home: NextPage<HomePageProps> = ({ currentUser: propsCurrentUser }) => {
  const {
    data: currentUserData,
    loading: currentUserDataLoading,
    error: currentUserDataError,
  } = useGetCurrentUserQuery();
  const [chatId, setChatId] = useState<null | number>(null);
  const [selectedContacts, setSelectedContacts] = useState<ContactType[]>([]);
  const [tab, setTab] = useState(1);
  const { data, loading, error, subscribeToMore } = useGetChatsQuery({
    variables: { limit: 1 },
  });
  useNewMessageSubscription();

  const subscribe = () =>
    subscribeToMore({
      document: NewMessageDocument,
      updateQuery: (prev, { subscriptionData }) => {
        if (!subscriptionData.data) return prev;
        //@ts-ignore
        const newMessage = subscriptionData.data.newMessage;
        const newChats = prev.getChats.map((chat) => {
          if (Number(chat.id) === Number(newMessage.chatId)) {
            return { ...chat, messages: [newMessage] };
          }
          return chat;
        });

        return { getChats: newChats };
      },
    });

  useEffect(() => {
    const unsubscribe = subscribe();

    return () => unsubscribe();
  }, []);

  const handleClick = (selectedChatId: number) => {
    setChatId(selectedChatId);
  };

  const handleTabChange = (tabNumber: number) => {
    setTab(tabNumber);
  };

  const selectedChat = data?.getChats.filter(
    (chat) => Number(chat.id) === chatId
  )[0];

  return (
    <div>
      <Head>
        <title>Whatsapp Clone</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <QueryResult
        error={currentUserDataError}
        loading={currentUserDataLoading}
      >
        {currentUserData?.currentUser && (
          <Container>
            <SidebarContainer>
              {tab === 1 && (
                <Sidebar
                  profilePictureUrl={
                    currentUserData.currentUser.profilePictureUrl
                      ? currentUserData.currentUser.profilePictureUrl
                      : undefined
                  }
                  toContactsTab={() => handleTabChange(2)}
                  toEditProfileTab={() => handleTabChange(5)}
                >
                  <QueryResult loading={loading} error={error}>
                    {data?.getChats.map((chat) => {
                      const selectedChatId = Number(chat.id);

                      return (
                        <Chat
                          key={`chatId-${chat.id}`}
                          isHighlighted={chatId === selectedChatId}
                          onClick={() => handleClick(selectedChatId)}
                          name={
                            chat.groupName
                              ? chat.groupName
                              : getUsersFullname(
                                  chat.members,
                                  //@ts-ignore
                                  Number(currentUserData.currentUser.id)
                                )
                          }
                          isGroupChat={!!chat.groupName}
                          latestMessage={chat.messages?.[0].text}
                          timeOfLatestMessage={formatDate(
                            chat.messages?.[0].createdAt
                          )}
                        />
                      );
                    })}
                  </QueryResult>
                </Sidebar>
              )}
              {tab === 2 && (
                <ContactsTab
                  selectChat={handleClick}
                  backToSidebar={() => handleTabChange(1)}
                  toGroupParticipants={() => handleTabChange(3)}
                />
              )}
              {tab === 3 && (
                <AddGroupParticipants
                  toContactsTab={() => handleTabChange(2)}
                  toCreateGroup={() => handleTabChange(4)}
                  selectedContacts={selectedContacts}
                  setSelectedContacts={setSelectedContacts}
                />
              )}
              {tab === 4 && (
                <CreateGroup
                  toGroupParticipants={() => handleTabChange(3)}
                  selectedContacts={selectedContacts}
                  selectChat={handleClick}
                  backToSidebar={() => handleTabChange(1)}
                  setSelectedContacts={setSelectedContacts}
                />
              )}
              {tab === 5 && (
                <EditProfile backToSidebar={() => handleTabChange(1)} />
              )}
            </SidebarContainer>
            <ChatWrapper>
              {chatId && selectedChat ? (
                <ChatSection
                  chatId={chatId}
                  chat={selectedChat}
                  userId={Number(currentUserData.currentUser.id)}
                />
              ) : (
                <ChatPlaceholder />
              )}
            </ChatWrapper>
          </Container>
        )}
      </QueryResult>
    </div>
  );
};

export const getServerSideProps = isUserLoggedIn;

export default Home;
