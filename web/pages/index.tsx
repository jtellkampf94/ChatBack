import type { NextPage } from "next";
import { useState, Fragment, useEffect } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import styled from "styled-components";
import { useApolloClient } from "@apollo/client";

import {
  useNewMessageSubscription,
  GetContactsQuery,
  useGetCurrentUserQuery,
  GetChatsQuery,
  useLogoutMutation,
  GetChatsDocument,
  useGetChatLazyQuery,
  GetMessagesDocument,
} from "../generated/graphql";
import { isUserLoggedIn } from "../utils/isUserLoggedIn";

import ChatSection from "../containers/ChatSection";
import Sidebar from "../containers/Sidebar";
import ChatPlaceholder from "../components/ChatPlaceholder";
import QueryResult from "../components/QueryResult";
import ContactsTab from "../containers/ContactsTab";
import AddGroupParticipants from "../containers/AddGroupParticipants";
import CreateGroup from "../containers/CreateGroup";
import EditProfile from "../containers/EditProfile";
import TabContainer from "../components/TabContainer";
import SearchUsers from "../containers/SearchUsers";

const Container = styled.div`
  display: flex;
  height: 100vh;
  width: 100vw;
  overflow: hidden;
`;

const SidebarContainer = styled.div`
  flex: 40%;
  position: relative;
  min-width: 330px;
  border-right: 1px solid ${({ theme }) => theme.globalTheme.greyLineColor};
  ${({ theme }) => theme.homePageTheme.mediumScreen`
    flex: 35%;
  `};
`;

const ChatWrapper = styled.div`
  flex: 60%;
  position: relative;
  ${({ theme }) => theme.homePageTheme.mediumScreen`
    flex: 65%;
  `};
`;

export type ContactType = GetContactsQuery["getContacts"][0];

const Home: NextPage = () => {
  const client = useApolloClient();
  const router = useRouter();
  const { data, loading, error } = useGetCurrentUserQuery();
  const [chatId, setChatId] = useState<null | number>(null);
  const [selectedContacts, setSelectedContacts] = useState<ContactType[]>([]);
  const [selectedChat, setSelectedChat] =
    useState<GetChatsQuery["getChats"][0]>();
  const [tab, setTab] = useState(1);
  const [getChatQuery, { data: newChatData }] = useGetChatLazyQuery();
  const [
    logout,
    { data: logoutData, loading: logoutLoading, error: logoutError },
  ] = useLogoutMutation();

  useNewMessageSubscription({
    onSubscriptionData: ({ client, subscriptionData }) => {
      if (subscriptionData?.data?.newMessage && data?.currentUser) {
        const newMessage = subscriptionData.data.newMessage;

        const chatData = client.readQuery({
          query: GetChatsDocument,
        });

        if (chatData) {
          const getChats = chatData.getChats;
          const chatIsNotInCache =
            getChats.filter(
              (chat: GetChatsQuery["getChats"][0]) =>
                Number(chat.id) === Number(newMessage.chatId)
            ).length === 0;

          if (!getChats || chatIsNotInCache) {
            getChatQuery({
              variables: {
                chatId: subscriptionData?.data?.newMessage.chatId,
                limit: 1,
              },
            });
          }

          if (!chatIsNotInCache) {
            client.cache.modify({
              fields: {
                getMessages(
                  existingMessages = { messages: [], hasMore: false }
                ) {
                  return {
                    messages: [{ ...newMessage }, ...existingMessages.messages],
                    hasMore: existingMessages.hasMore,
                  };
                },
              },
            });
          }
        }
      }
    },
  });

  useEffect(() => {
    if (newChatData) {
      const { getChats } = client.readQuery({ query: GetChatsDocument });

      const chatIsNotInCache =
        getChats.filter(
          (chat: GetChatsQuery["getChats"][0]) =>
            Number(chat.id) === Number(newChatData.getChat.id)
        ).length === 0;

      if (chatIsNotInCache) {
        client.writeQuery({
          query: GetChatsDocument,
          data: { getChats: [newChatData.getChat, ...getChats] },
        });
      }
    }
  }, [newChatData]);

  const handleClick = (selectedChatId: number) => {
    setChatId(selectedChatId);
  };

  const handleTabChange = (tabNumber: number) => {
    setTab(tabNumber);
  };

  const handleSetChat = (chat: GetChatsQuery["getChats"][0]) => {
    setSelectedChat(chat);
  };

  const handleLogout = async () => {
    await logout();
    router.push("/login");
  };

  return (
    <div>
      <Head>
        <title>Whatsapp Clone</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <QueryResult
          error={error || logoutError}
          loading={loading || logoutLoading}
        >
          {data?.currentUser && (
            <Fragment>
              <SidebarContainer>
                <TabContainer tabIn={tab === 1}>
                  <Sidebar
                    currentUser={data.currentUser}
                    toContactsTab={() => handleTabChange(2)}
                    toEditProfileTab={() => handleTabChange(5)}
                    toSearchUsers={() => handleTabChange(6)}
                    handleClick={handleClick}
                    chatId={chatId}
                    handleSetChat={handleSetChat}
                    handleLogout={handleLogout}
                  />
                </TabContainer>

                <TabContainer tabIn={tab === 2}>
                  <ContactsTab
                    selectChat={handleClick}
                    backToSidebar={() => handleTabChange(1)}
                    toGroupParticipants={() => handleTabChange(3)}
                  />
                </TabContainer>

                <TabContainer tabIn={tab === 3}>
                  <AddGroupParticipants
                    toContactsTab={() => handleTabChange(2)}
                    toCreateGroup={() => handleTabChange(4)}
                    selectedContacts={selectedContacts}
                    setSelectedContacts={setSelectedContacts}
                  />
                </TabContainer>

                <TabContainer tabIn={tab === 4}>
                  <CreateGroup
                    toGroupParticipants={() => handleTabChange(3)}
                    selectedContacts={selectedContacts}
                    selectChat={handleClick}
                    backToSidebar={() => handleTabChange(1)}
                    setSelectedContacts={setSelectedContacts}
                  />
                </TabContainer>

                <TabContainer tabIn={tab === 5}>
                  <EditProfile backToSidebar={() => handleTabChange(1)} />
                </TabContainer>

                <TabContainer tabIn={tab === 6}>
                  <SearchUsers backToSidebar={() => handleTabChange(1)} />
                </TabContainer>
              </SidebarContainer>

              <ChatWrapper>
                {chatId && selectedChat ? (
                  <ChatSection
                    chatId={chatId}
                    chat={selectedChat}
                    userId={Number(data.currentUser.id)}
                  />
                ) : (
                  <ChatPlaceholder />
                )}
              </ChatWrapper>
            </Fragment>
          )}
        </QueryResult>
      </Container>
    </div>
  );
};

export const getServerSideProps = isUserLoggedIn;

export default Home;
